name: Main Foodgram Workflow

on:
  push:
    branches:
      - main

jobs:
  tests:
    runs-on: ubuntu-latest  # Разворачиваем окружение
    services:
      postgres:
        image: postgres:13.10
        # Указываем имя тестовой базы, имя и пароль пользователя в открытом виде,
        # ведь эта база будет работать только во время прогона тестов
        env:
          POSTGRES_USER: foodgram_user
          POSTGRES_PASSWORD: foodgram_password
          POSTGRES_DB: foodgram
        ports:
          - 5432:5432
        # Эта конструкция описывает проверку готовности сервиса postgres
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
    - name: Check out code
      uses: actions/checkout@v3  # Копируем код проекта
    - name: Set up Python
      uses: actions/setup-python@v4   # Устанавливаем Python с помощью action
      with:
        python-version: 3.9
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip 
        pip install flake8==6.0.0 flake8-isort==6.0.0
        pip install -r ./backend/requirements.txt 
    - name: Test with flake8 and django tests  
      env:  # Добавляем env-переменные для доступа к БД
        POSTGRES_USER: foodgram_user
        POSTGRES_PASSWORD: foodgram_password
        POSTGRES_DB: foodgram
        DB_HOST: 127.0.0.1  # Сервер БД запущен в Docker, но его порт проброшен на хост
        DB_PORT: 5432  # Поэтому подключаемся к 127.0.0.1:5432
      run: |
        python -m flake8 backend/
        cd backend/
        python manage.py test 

  build_and_push_to_docker_hub:
    name: Push Docker image to DockerHub
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3  # Получение исходного кода из репозитория
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2  # Установка сборщика контейнеров Docker
      - name: Login to Docker 
        uses: docker/login-action@v2  # Авторизация на Docker Hub
        with:  # При помощи with передаём в action параметры username и password
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./backend/  # нужный Dockerfile находится в ./backend/
          push: true  # push: true указывает, что образ нужно СОБРАТЬ и ОТПРАВИТЬ
          tags: umilja/foodgram_backend:latest

  build_gateway_and_push_to_docker_hub:
    name: Push infra Docker image to DockerHub
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker 
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./infra/
          push: true
          tags: umilja/foodgram_infra:latest 

  build_frontend_and_push_to_docker_hub:
    name: Push frontend Docker image to DockerHub
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker 
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./frontend/
          push: true
          tags: umilja/foodgram_frontend:latest 

  deploy:
    runs-on: ubuntu-latest
    needs: 
      # Дождёмся билда всех образов
      - build_and_push_to_docker_hub
      - build_frontend_and_push_to_docker_hub
      - build_gateway_and_push_to_docker_hub
    steps:
    - name: Checkout repo
      uses: actions/checkout@v3
    - name: Copy docker-compose.yml via ssh
      uses: appleboy/scp-action@master
      with:  # Передаём параметры для action appleboy/scp-action:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        source: "docker-compose.yml"
        target: "foodgram"
    - name: Executing remote ssh commands to deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        script: |
          cd foodgram
          sudo docker compose -f docker-compose.yml pull  # Выполняет pull образов с Docker Hub
          sudo docker compose -f docker-compose.yml down  
          sudo docker compose -f docker-compose.yml up -d  # Перезапускает все контейнеры в Docker Compose
          sleep 5
          sudo docker compose -f docker-compose.yml exec backend python manage.py migrate  # Выполняет миграции
          sudo docker compose -f docker-compose.yml exec backend python manage.py collectstatic --noinput # Выполняет сбор статики
          sudo docker compose -f docker-compose.yml exec backend cp -r /app/collected_static/. /static/static/